
#include<stdio.h>
int main()
{
  int arr[]={6,7,8,9,10};
  int *ptr=arr;
  *(ptr++)+=123;//129,[7],8,9,10
  //printf("%d,%d\n ",*ptr,*(++ptr));   //88
  //printf("%d,%d\n ",*(++ptr),*(++ptr));   //99
  //printf("%d,%d\n ",*(ptr++),*(++ptr);   //89
  //printf("%d,%d\n ",*(ptr++),*(ptr++);   //87
  return 0;
}
对于 函数包含多个参数的情况，首先从右到左依次计算每个参数表达式的值，然后再依次从右到左把参数压入栈。
对于原生指针int *p,解引用操作发生在表达式计算完之后压参的时候。所以第2例输出99
如果自定义一个指针类型的类，然后重载*运算符，则解引用操作发生在参数表达式计算的过程中。即对于第2例子，输出98
注意前置++和后置++的区别，前者返回自身的引用，后者返回一个值
