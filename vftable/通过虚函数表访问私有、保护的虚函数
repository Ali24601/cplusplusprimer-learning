1.通过虚函数表指针，类可以访问自己的私有的以及保护的虚函数。
2.指向子类的基类指针可以访问子类重写的虚函数或者新增的虚函数
（基类指针访问新增的虚函数本来是不可行的，这不是多态），
以及基类未被重写的虚函数，而不用考虑权限问题。

1>  class Base	size(4):
1>  	+---
1>   0	| {vfptr}
1>  	+---
1>
1>  Base::$vftable@:
1>  	| &Base_meta
1>  	|  0
1>   0	| &Base::f
1>   1	| &Base::g
1>   2	| &Base::h
1>
1>  Base::f this adjustor: 0
1>  Base::g this adjustor: 0
1>  Base::h this adjustor: 0

1>  class Derived	size(4):
1>  	+---
1>   0	| +--- (base class Base)
1>   0	| | {vfptr}
1>  	| +---
1>  	+---
1>
1>  Derived::$vftable@:
1>  	| &Derived_meta
1>  	|  0
1>   0	| &Derived::f
1>   1	| &Base::g
1>   2	| &Derived::h
1>   3	| &Derived::t
1>
1>  Derived::h this adjustor: 0
1>  Derived::t this adjustor: 0
1>  Derived::f this adjustor: 0

#include<iostream>  
using namespace std;
typedef void(*pFun)(void);
class Base {
public:
	virtual void f() {
		cout << "Base::f()" << endl;
	}
	virtual void g() {
		cout << "Base::g()" << endl;
	}
private:
	virtual void h() {
		cout << "Base::h()" << endl;
	}
};
class Derived:public Base {
public:
	virtual void h() {
		cout << "Derived::h()" << endl;
	}
	virtual void t() {
		cout << "Derived::t()" << endl;
	}
private:
	virtual void f() {
		cout << "Derived::f()" << endl;
	}
};
int main() {
	Base b;
	//(long*)&b指向v_table, (long**)&b则指向v_table的第一个元素  
	long** p = (long**)&b;
	for (int i = 0; i != 3; ++i) {
		// *p取到v_table的地址， *p+i 指到v_table第i个元素，
		//*(*p+i)取出第i个函数指针，((Fun)*(*p+i))(); 转换并调用。  
		((pFun)p[0][i])(); 
	}

	Derived d;
	//(long*)&b指向v_table, (long**)&b则指向v_table的第一个元素  
	p = (long**)&d;
	for (int i = 0; i != 4; ++i) {
		// *p取到v_table的地址， *p+i 指到v_table第i个元素，
		//*(*p+i)取出第i个函数指针，((Fun)*(*p+i))(); 转换并调用。  
		((pFun)p[0][i])();
	}
	return 0;
}
