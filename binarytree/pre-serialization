首先我们介绍二叉树先序序列化的方式，假设序列化的结果字符串为str，初始时str等于空字符串。先序遍历二叉树，如果遇到空节点，就在str的末尾加上“#!”，“#”表示这个节点为空，节点值不存在，当然你也可以用其他的特殊字符，“!”表示一个值的结束。如果遇到不为空的节点，假设节点值为3，就在str的末尾加上“3!”。现在请你实现树的先序序列化。
给定树的根结点root，请返回二叉树序列化后的字符串。
测试样例：



/*
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
    TreeNode(int x) :
            val(x), left(NULL), right(NULL) {
    }
};*/

class TreeToString {
public:
    string toString(TreeNode* root) {
        string ans;
        stack<TreeNode *>nodestack;
        nodestack.push(root);
            while(!nodestack.empty())
            {
            TreeNode *now=nodestack.top();
            nodestack.pop();
            if(now)
                {
                ans+=to_string(now->val);
                ans+="!";
                nodestack.push(now->right);//无需判断是否为空，注意与普通前序遍历的区别
                nodestack.push(now->left);//无需判断是否为空，注意与普通前序遍历的区别
            }
			else
                ans+="#!";
        }
        return ans;
    }
};
