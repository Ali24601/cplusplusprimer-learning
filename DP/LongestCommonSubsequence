给定两个字符串A和B，返回两个字符串的最长公共子序列的长度。例如，A="1A2C3D4B56”，B="B1D23CA45B6A”，”123456"或者"12C4B6"都是最长公共子序列。
给定两个字符串A和B，同时给定两个串的长度n和m，请返回最长公共子序列的长度。保证两串长度均小于等于300。
测试样例：
"1A2C3D4B56",10,"B1D23CA45B6A",12
返回：6

//space complexity O(m*n)
class LCS {
public:
    int max(int a,int b)
        {
        return a>b?a:b;
    }
    int findLCS(string A, int n, string B, int m) {
        // write code here
        vector<vector<int>> sheet;
        sheet.push_back(vector<int>());
        for(int j=0;j<m;++j)
            {
            if(A[0]==B[j])
                break;
            else
                sheet[0].push_back(0);
            }
        sheet[0].resize(m,1);
        int shown=0;
        for(int i=1;i<n;++i)
            {
            sheet.push_back(vector<int>(m));
            if(A[i]==B[0])
                {
                shown=1;
            }
            sheet[i][0]=shown;
        }
        for(int i=1;i<n;++i)
            for(int j=1;j<m;++j)
            {
            int a=max(sheet[i-1][j],sheet[i][j-1]);
            if(A[i]==B[j])
                a=max(a,sheet[i-1][j-1]+1);
            sheet[i][j]=a;
        }
        return sheet[n-1][m-1];
    }
};

//space complexity O(min(m,n))
class LCS {
public:
    int max(int a,int b)
        {
        return a>b?a:b;
    }
    int findLCS(string A, int n, string B, int m) {
        // write code here
        int **sheet=(int **)malloc(2*sizeof(int*));
        for(int i=0;i<2;++i)
            {
            sheet[i]=(int*)malloc((m+1)*sizeof(int));
            memset(sheet[i],0,(m+1)*sizeof(int));
        }  
        for(int i=0;i<n;++i)
            for(int j=0;j<m;++j)
            {
            int index=i&1;
            int a=max(sheet[!index][j+1],sheet[index][j]);
            if(A[i]==B[j])
                a=max(a,sheet[!index][j]+1);
            sheet[index][j+1]=a;
        }
        int ans=sheet[(n-1)&0x1][m];
        for(int i=0;i<2;++i)
            free(sheet[i]);
        free(sheet);
        return ans;
    }
};
