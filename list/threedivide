对于一个链表，我们需要用一个特定阈值完成对它的分化，使得小于等于这个值的结点移到前面，大于该值的结点在后面，同时保证两类结点内部的位置关系不变。
给定一个链表的头结点head，同时给定阈值val，请返回一个链表，使小于等于它的结点在前，大于等于它的在后，保证结点值不重复。
测试样例：
{1,4,2,5},3
{1,2,4,5}
{==,<,>}

/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};*/
class Divide {
public:
    ListNode* listDivide(ListNode* head, int val) {
        // write code here
        ListNode *less=NULL;
        ListNode *lesstail=NULL;
        ListNode *equal=NULL;
        ListNode *equaltail=NULL;
        ListNode *more=NULL;
        ListNode *moretail=NULL;
        ListNode *p=head;
        ListNode *newhead=NULL;
        while(p)
            {
            if(p->val<val)
                {
                if(less==NULL)
                    {
                    less=lesstail=p;
                }
                else
                    {
                    lesstail->next=p;
                    lesstail=lesstail->next;
                }
                    
            }
            if(p->val==val)
                {
                if(equal==NULL)
                    {
                    equal=equaltail=p;
                }
                else
                    {
                    equaltail->next=p;
                    equaltail=equaltail->next;
                }                   
            }
            if(p->val>val)
                {
                if(more==NULL)
                    {
                    more=moretail=p;
                }
                else
                    {
                    moretail->next=p;
                    moretail=moretail->next;
                }                  
            }
            p=p->next;
        }
        if(more!=NULL)
            {
            moretail->next=NULL;
            newhead=more;
        }
        if(less!=NULL)
            {
            lesstail->next=newhead;
            newhead=less;
        }
        if(equal!=NULL)
            {
            equaltail->next=newhead;
            newhead=equal;
        }       
        return newhead;
    }
};
